/*
  Скетч к проекту "Часы на ГРИ версия 2"
  Страница проекта (схемы, описания): https://alexgyver.ru/nixieclock_v2/
  Исходники на GitHub: https://github.com/AlexGyver/NixieClock_v2
  Нравится, как написан код? Поддержи автора! https://alexgyver.ru/support_alex/
  Автор: AlexGyver Technologies, 2018
  https://AlexGyver.ru/
*/

/*
  Управление:
  1. Настройка времени и даты (удержание левой кнопки):
  Управление: Левая кнопка - выбор, остальные "больше" и "меньше"
  1.1 Режим установки времени:
    - Клик по "выбору" - смена настройки часы/минуты
    - Клик "больше" и "меньше" - изменение времени
    - Удержать "выбор" - переход к установке года
  1.2 Режим установки года:
    - Установка года "больше" и "меньше"
    - Удержать "выбор" - переход к установке даты
  1.3 Режим установки даты:
    - Клик по "выбору" - смена настройки день/месяц
    - Клик "больше" и "меньше" - изменение день/месяц
    - Удержать "выбор" - сохранить и вернуться в режим часов

  2. Настройка будильника (удержание средней кнопки):
     Управление: Средняя кнопка - выбор, остальные "больше" и "меньше"
  2.1 Режим установки режима будильника:
    - Клик "больше" и "меньше" - изменение режима (0 = отключен, 1 = однократный, 2 = ежедневный, 3 = по рабочим дням (кроме Сб,Вс))
    - Удержать "выбор" - сохранить и вернуться в режим часов (если будильник отключен) или в режим установки времени будильника
  2.2 Режим установки времени будильника:
    - Клик по "выбору" - смена настройки часы/минуты
    - Клик "больше" и "меньше" - изменение времени
    - Удержать "выбор" - сохранить вернуться в режим часов или в режим установки трека и громкости для DFPlayer Mini
  2.3 Режим установки трека и громкости (только для DFPlayer Mini)
    - Клик по "выбору" - смена настройки трек/громкость
    - Клик "больше" и "меньше" - изменение трека/громкости
    - Удержать "выбор" - сохранить и вернуться в режим часов

  1. Настройка часов перехода режима день-ночь (удержание правой кнопки):
     Управление: Правая кнопка - выбор, остальные "больше" и "меньше"
    - Клик по "выбору" - смена настройки час начала ночного режим/час окончания ночного режима (если часы одинаковы то ночной режим отключен)
    - Клик "больше" и "меньше" - изменение часа
    - Удержать "выбор" - сохранить и вернуться в режим часов


  Управление эффектами В РЕЖИМЕ ЧАСОВ:
    - Нажатие левой кнопки включает и выключает "глюки"
    - Клик по центральной кнопке переключает режимы подсветки ламп
      - Отключена
      - Постоянное свечение
      - Дыхание
    - Клик по правой кнопке переключает режимы перелистывания цифр
      - Без эффекта
      - Плавное угасание
      - Перемотка по порядку числа
      - Перемотка по катодам
      - Поезд
      - Резинка
*/
/*
  Версия 2.0 (совместно с Pavel Smelov):
  - Поправлены косяки с подсветкой
  - Добавлены эффекты переключения "поезд" и "резинка"
  - Оптимизирован код

  Версия 2.1:
  - Исправлена ошибка с ходом времени

  Версия 2.2:
  - Сброс секунд при установке времени

  Версия 2.3:
  - Добавлены расширенные настройки яркости
  - Исправлены зависания при нулевых значениях некоторых настроек

  Версия 2.4:
  - Продолжаем исправлять баги с нулевыми настройками

  Версия 2.5:
  -

  Версия DM 1.0 (Dmitry Matveev) основана на версии 2.5:
  - Другая организация кода (ООП), надеюсь поддерживать и развивать его будет проще
  - Добавлен будильник (3 режима работы)
  - Добавлена настройки перехода день-ночь
  - Изменено управление

  Версия DM 1.1:
  - Индикация выбранного режима эффектов, подсветки, глюков
  - Немного переделана подсветка в режиме дыхание
  - Опциональная поддержка DFPlayer Mini(только Mega328) в качестве будильника 
    (DFPlayer имеет проблемы с воспроизведением последнего трека, потому количество треков на карте должно быть на 1 больше)
  - Выбор трека и громкости для будильника DFPlayer, нарастающая громкость

  Версия DM 1.2:
  - Оптимизации
  - Возможность отключения будильника при сборке (ALARM_TYPE = 0) - уменьшает размер скетча
  - Другое управление настройками будильника
  - Двенадцати-часовой формат (вкл AM_PM_MODE)

  Версия DM 1.3:
  - Поддержка датчика освещенности для изменения яркости подсветки (вкл AUTO_BRIGHT)

  Версия DM 1.4:
  - Поддержка платы с 6 индикаторами
  - Поддержка DHT11/DHT22 (только Mega328)
  - Поддержка адресных сведодиодных сборок для подсветки

    Версия DM 1.5:
  - Другой алгоритм работы подсветки и точки
*/

//#define AM_PM_MODE 
// Внимание!!! при переводе часов в режим AM/PM в настройках времени и времени будильника AM-PM обозначается горением точки!

#define ALARM_TYPE 2 // 0 - без будильника, 1 - пьезо, 2 - dfplayer mini

// ************************** НАСТРОЙКИ **************************
#define BOARD_TYPE 4
// тип платы часов:
// 0 - 4 индикатора IN-12 turned (индикаторы стоят правильно)
// 1 - 4 индикатора IN-12 (индикаторы перевёрнуты)
// 2 - 4 индикатора IN-14 (обычная и neon dot)
// 3 - 4 индикатора другие индикаторы
// 4 - 6 индикаторов
#if (BOARD_TYPE < 4)
    #define INDI_COUNT 4
#else
    #define INDI_COUNT 6
#endif

#define DUTY 180        // скважность ШИМ. От скважности зависит напряжение! у меня 175 вольт при значении 180 и 145 вольт при 120

// ======================= ЭФФЕКТЫ =======================
// эффекты перелистывания часов
// Выбранный активен при запуске и меняется кнопками
// 0 - нет эффекта
// 1 - плавное угасание и появление (рекомендуемая скорость: 100-150)
// 2 - перемотка по порядку числа (рекомендуемая скорость: 50-80)
// 3 - перемотка по порядку катодов в лампе (рекомендуемая скорость: 30-50)
// 4 - поезд (рекомендуемая скорость: 50-170)
// 5 - резинка (рекомендуемая скорость: 50-150)
byte FLIP_SPEED[] = {0, 130, 50, 40, 70, 70}; // скорость эффектов, мс (количество не меняй)


// =======================  ЯРКОСТЬ =======================
//#define AUTO_BRIGHT       // включите для использования датчика освещенности
#define RGB_BACKLIGHT       // включите для адресной RGB подсветки
#ifdef RGB_BACKLIGHT
    #define R 128
    #define G 128
    #define B 0
#endif

#ifdef AUTO_BRIGHT
    #define AUTO_BRIGHT_DAY_NIGHT_THRESOLD 150 // порог переключения подбирается по типу фоторезистора
#endif

#define INDI_BRIGHT 20      // яркость цифр дневная (1 - 24) !на 24 могут быть фантомные цифры!
#define INDI_BRIGHT_N 10     // яркость ночная (1 - 24)

// =======================  ГЛЮКИ =======================
#define GLITCH_MIN 30       // минимальное время между глюками, с
#define GLITCH_MAX 120      // максимальное время между глюками, с

// ======================  МИГАНИЕ =======================
#define DOT_TIME 500        // время мигания точки, мс
#define DOT_TIMER 10        // шаг яркости точки, мс
#define DOT_BRIGHT 200       // яркость точки дневная (1 - 255)
#define DOT_BRIGHT_N 20     // яркость точки ночная (1 - 255)

// ==================  АНТИОТРАВЛЕНИЕ ====================
#define BURN_TIME 10        // период обхода индикаторов в режиме очистки, мс
#define BURN_LOOPS 3        // количество циклов очистки за каждый период
#define BURN_PERIOD 15      // период антиотравления, минут

#define SHOW_EFFECTS_MODE_TIMEOUT 2  // таймаут индикации режима подсветки, глюков, эффектов (сек)

// пины
#if (BOARD_TYPE < 4)
    #define KEY0 3    // часы
    #define KEY1 4    // часы 
    #define KEY2 5    // минуты
    #define KEY3 6    // минуты
    #define BTN1 7    // кнопка 1
    #define BTN2 8    // кнопка 2
    #define GEN 9     // генератор
    #define DOT 10    // точка
    #define BTN3 12   // кнопка 3
#else
    #define KEY0 10   // часы
    #define KEY1 9    // часы 
    #define KEY2 5    // минуты
    #define KEY3 6    // минуты
    #define KEY4 7    // секунды
    #define KEY5 8    // секунды
    #define DOT 4     // точка
    #define BTN 3     // кнопки
#endif

#define BACKL 11  // подсветка
#ifdef BACKL
    #define BACKL_BRIGHT 60    // макс. яркость подсветки ламп дневная (0 - 255)
    #define BACKL_BRIGHT_N 4   // макс. яркость подсветки ламп ночная (0 - 255, 0 - подсветка выключена)
    #define BACKL_MIN_BRIGHT 2 // мин. яркость подсветки ламп в режиме дыхание (0 - 255)
    #define BACKL_PAUSE 1000     // пазуа "темноты" между вспышками подсветки ламп в режиме дыхание, мс
    #define BACKL_STEP 2        // шаг яркости подсветки день
    #define BACKL_STEP_N 2        // шаг яркости подсветки ночь
#endif

#define DHT_PIN 2     // включить для использования DHT11/22

#ifdef AUTO_BRIGHT
    #define LIGHT_SENSOR A7 // фоторезистор
#endif

#if (ALARM_TYPE != 0)
    #define ALM_TIMEOUT 30     // таймаут будильника
    #if (ALARM_TYPE == 1)
        #if (BOARD_TYPE < 4)
            #define PIEZO 2   // пищалка
        #else
            #define PIEZO 3   // пищалка
        #endif
    #elif (ALARM_TYPE == 2)
        #define ALM_TRACKS 3 // количество треков будильника
        #define DFPLAYER_TX 2 // пин TX
        #define DFPLAYER_RX 13 // пин RX
        #define DFPLAYER_MAXVOLUME 30 // громкость
    #endif
#endif

// дешифратор
#define DECODER0 A0
#define DECODER1 A1
#define DECODER2 A2
#define DECODER3 A3

// ячейки EEPROM
#define EEPROM_CELL_FLIP_MODE 0
#define EEPROM_CELL_BACKLIGHT_MODE 1
#define EEPROM_CELL_GLITCH_MODE 2
#define EEPROM_CELL_NIGHT_START 3
#define EEPROM_CELL_NIGHT_END 4

#if (ALARM_TYPE != 0)
    #define EEPROM_CELL_ALARM_HOURS 5
    #define EEPROM_CELL_ALARM_MINUTES 6
    #define EEPROM_CELL_ALARM_MODE 7
    #if (ALARM_TYPE == 2)
        #define EEPROM_CELL_ALARM_TRACK 8
        #define EEPROM_CELL_ALARM_VOLUME 9
    #endif
#endif


// распиновка ламп
#if (BOARD_TYPE == 0)
    const byte digitMask[] = {7, 3, 6, 4, 1, 9, 8, 0, 5, 2};   // маска дешифратора платы in12_turned (цифры нормальные)
    const byte opts[] = {KEY0, KEY1, KEY2, KEY3};              // порядок индикаторов слева направо
    const byte cathodeMask[] = {1, 6, 2, 7, 5, 0, 4, 9, 8, 3}; // порядок катодов in12
#elif (BOARD_TYPE == 1)
    const byte digitMask[] = {2, 8, 1, 9, 6, 4, 3, 5, 0, 7};   // маска дешифратора платы in12 (цифры вверх ногами)
    const byte opts[] = {KEY3, KEY2, KEY1, KEY0};              // порядок индикаторов справа налево (для IN-12 turned) и ин-14
    const byte cathodeMask[] = {1, 6, 2, 7, 5, 0, 4, 9, 8, 3}; // порядок катодов in12
#elif (BOARD_TYPE == 2)
    const byte digitMask[] = {9, 8, 0, 5, 4, 7, 3, 6, 2, 1};   // маска дешифратора платы in14
    const byte opts[] = {KEY3, KEY2, KEY1, KEY0};              // порядок индикаторов справа налево (для IN-12 turned) и ин-14
    const byte cathodeMask[] = {1, 0, 2, 9, 3, 8, 4, 7, 5, 6}; // порядок катодов in14
#elif (BOARD_TYPE == 3)
    const byte digitMask[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};   // тут вводим свой порядок пинов
    const byte opts[] = {KEY0, KEY1, KEY2, KEY3};              // свой порядок индикаторов
    const byte cathodeMask[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}; // и свой порядок катодов
#elif (BOARD_TYPE == 4)
    const byte digitMask[] = { 0, 1, 4, 5, 8, 9, 12, 13, 2, 3 };   // маска дешифратора платы in8-2, in14?
    const byte opts[] = { KEY0, KEY1, KEY2, KEY3, KEY4, KEY5 };  // порядок индикаторов слева направо
    const byte cathodeMask[] = { 1, 0, 2, 9, 3, 8, 4, 7, 5, 6 }; // порядок катодов in8-2, in14?
#endif

/*
  ард ног ном
  А0  7   4
  А1  6   2
  А2  4   8
  А3  3   1
*/
